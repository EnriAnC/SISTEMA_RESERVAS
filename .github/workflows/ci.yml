# CI/CD Pipeline Principal para Sistema de Reservas
# Este workflow valida la compilación, formato y calidad del código Go

name: 🔄 CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Variables de entorno globales
env:
  GO_VERSION: '1.21'
  GOLANGCI_LINT_VERSION: v1.55.2

# Permisos mínimos requeridos
permissions:
  contents: read
  checks: write

jobs:
  # Job 1: Detectar cambios para optimizar pipeline
  detect-changes:
    name: 🔍 Detectar Cambios
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.changes.outputs.services }}
      user-service: ${{ steps.changes.outputs.user-service }}
      resource-service: ${{ steps.changes.outputs.resource-service }}
      booking-service: ${{ steps.changes.outputs.booking-service }}
      notification-service: ${{ steps.changes.outputs.notification-service }}
      api-gateway: ${{ steps.changes.outputs.api-gateway }}
      infrastructure: ${{ steps.changes.outputs.infrastructure }}
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 🔍 Detectar archivos cambiados
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          services:
            - 'services/**'
          user-service:
            - 'services/user-service/**'
          resource-service:
            - 'services/resource-service/**'
          booking-service:
            - 'services/booking-service/**'
          notification-service:
            - 'services/notification-service/**'
          api-gateway:
            - 'api-gateway/**'
          infrastructure:
            - 'infrastructure/**'
            - 'docker-compose.yml'
            - 'kubernetes/**'

  # Job 2: Validación básica y setup común
  setup-validation:
    name: 🔧 Setup & Validación Básica
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.services == 'true'
    
    strategy:
      matrix:
        go-version: ['1.21', '1.22']
      fail-fast: false
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 🐹 Configurar Go ${{ matrix.go-version }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
        cache: false # Manejamos cache manualmente para mejor control
        
    - name: 📦 Setup Go cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
          ${{ runner.os }}-go-
          
    - name: 🔍 Verificar go.mod consistency
      run: |
        echo "🔍 Verificando consistencia de módulos Go..."
        exit_code=0
        for service in user-service resource-service booking-service notification-service; do
          if [ -f "services/$service/go.mod" ]; then
            echo "Verificando services/$service..."
            cd "services/$service"
            go mod tidy
            if [ -n "$(git status --porcelain go.mod go.sum 2>/dev/null)" ]; then
              echo "❌ $service: go mod tidy tiene cambios pendientes"
              git diff go.mod go.sum || true
              exit_code=1
            else
              echo "✅ $service: go mod está limpio"
            fi
            cd ../..
          fi
        done
        exit $exit_code

  # Job 3: Build y test por servicio (paralelo)
  service-build-test:
    name: 🏗️ Build & Test
    runs-on: ubuntu-latest
    needs: [detect-changes, setup-validation]
    if: needs.detect-changes.outputs.services == 'true'
    
    strategy:
      matrix:
        service: [user-service, resource-service, booking-service, notification-service]
        go-version: ['1.21']
      fail-fast: false
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 🔍 Verificar si el servicio cambió
      id: should-run
      run: |
        if [ "${{ needs.detect-changes.outputs[matrix.service] }}" == "true" ] || [ "${{ github.event_name }}" == "push" ]; then
          echo "run=true" >> $GITHUB_OUTPUT
        else
          echo "run=false" >> $GITHUB_OUTPUT
        fi
      
    - name: 🐹 Configurar Go ${{ matrix.go-version }}
      if: steps.should-run.outputs.run == 'true'
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
        
    - name: 📦 Cache dependencias Go
      if: steps.should-run.outputs.run == 'true'
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        
    - name: 📥 Descargar dependencias
      if: steps.should-run.outputs.run == 'true'
      working-directory: ./services/${{ matrix.service }}
      run: go mod download
      
    - name: 🎨 Verificar formato (gofmt)
      if: steps.should-run.outputs.run == 'true'
      working-directory: ./services/${{ matrix.service }}
      run: |
        if [ -n "$(gofmt -l .)" ]; then
          echo "❌ Código no formateado correctamente en ${{ matrix.service }}:"
          gofmt -d .
          exit 1
        else
          echo "✅ Código correctamente formateado en ${{ matrix.service }}"
        fi
        
    - name: 🔨 Compilar servicio
      if: steps.should-run.outputs.run == 'true'
      working-directory: ./services/${{ matrix.service }}
      run: |
        echo "🏗️ Compilando ${{ matrix.service }}..."
        go build -v ./...
        echo "✅ ${{ matrix.service }} compilado exitosamente"
        
    - name: 🔍 go vet
      if: steps.should-run.outputs.run == 'true'
      working-directory: ./services/${{ matrix.service }}
      run: |
        echo "🔍 Ejecutando go vet en ${{ matrix.service }}..."
        go vet ./...
        echo "✅ go vet pasó sin errores en ${{ matrix.service }}"
        
    - name: 🧪 Ejecutar tests
      if: steps.should-run.outputs.run == 'true'
      working-directory: ./services/${{ matrix.service }}
      run: |
        echo "🧪 Ejecutando tests en ${{ matrix.service }}..."
        go test -v -race -coverprofile=coverage.out ./...
        echo "✅ Tests completados en ${{ matrix.service }}"
        
    - name: 📊 Upload coverage
      if: steps.should-run.outputs.run == 'true'
      uses: codecov/codecov-action@v3
      with:
        file: ./services/${{ matrix.service }}/coverage.out
        flags: ${{ matrix.service }}
        name: ${{ matrix.service }}-coverage

  # Job 4: Linting avanzado (paralelo por servicio)
  advanced-lint:
    name: 🧹 Linting
    runs-on: ubuntu-latest
    needs: [detect-changes]
    if: needs.detect-changes.outputs.services == 'true'
    
    strategy:
      matrix:
        service: [user-service, resource-service, booking-service, notification-service]
      fail-fast: false
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 🔍 Verificar si el servicio cambió
      id: should-run
      run: |
        if [ "${{ needs.detect-changes.outputs[matrix.service] }}" == "true" ] || [ "${{ github.event_name }}" == "push" ]; then
          echo "run=true" >> $GITHUB_OUTPUT
        else
          echo "run=false" >> $GITHUB_OUTPUT
        fi
      
    - name: 🐹 Configurar Go
      if: steps.should-run.outputs.run == 'true'
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: 🧹 golangci-lint para ${{ matrix.service }}
      if: steps.should-run.outputs.run == 'true'
      uses: golangci/golangci-lint-action@v3
      with:
        version: ${{ env.GOLANGCI_LINT_VERSION }}
        working-directory: services/${{ matrix.service }}
        args: --timeout=5m --out-format=github-actions
        only-new-issues: false
  # Job 5: Seguridad y vulnerabilidades
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: [detect-changes]
    if: needs.detect-changes.outputs.services == 'true'
    
    strategy:
      matrix:
        service: [user-service, resource-service, booking-service, notification-service]
      fail-fast: false
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 🔍 Verificar si el servicio cambió
      id: should-run
      run: |
        if [ "${{ needs.detect-changes.outputs[matrix.service] }}" == "true" ] || [ "${{ github.event_name }}" == "push" ]; then
          echo "run=true" >> $GITHUB_OUTPUT
        else
          echo "run=false" >> $GITHUB_OUTPUT
        fi
      
    - name: 🐹 Configurar Go
      if: steps.should-run.outputs.run == 'true'
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: 📦 Instalar gosec
      if: steps.should-run.outputs.run == 'true'
      run: |
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        
    - name: 🔍 Ejecutar Gosec Security Scanner
      if: steps.should-run.outputs.run == 'true'
      working-directory: ./services/${{ matrix.service }}
      run: |
        echo "🔍 Ejecutando gosec en ${{ matrix.service }}..."
        gosec -fmt sarif -out gosec-${{ matrix.service }}.sarif ./...
        echo "✅ Gosec completado para ${{ matrix.service }}"
        
    - name: 📊 Upload SARIF file
      if: steps.should-run.outputs.run == 'true'
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: ./services/${{ matrix.service }}/gosec-${{ matrix.service }}.sarif
        category: gosec-${{ matrix.service }}
        
    - name: 🔍 Ejecutar go mod audit (vulnerabilidades en dependencias)
      if: steps.should-run.outputs.run == 'true'
      working-directory: ./services/${{ matrix.service }}
      run: |
        echo "🔍 Verificando vulnerabilidades en dependencias de ${{ matrix.service }}..."
        # Usar go mod audit si está disponible, sino skip
        if command -v nancy &> /dev/null; then
          go list -json -deps ./... | nancy sleuth
        else
          echo "⚠️ Nancy no está disponible, saltando verificación de dependencias"
        fi
      continue-on-error: true # No fallar el build por vulnerabilidades menores
      
    - name: 📊 Instalar y ejecutar govulncheck
      if: steps.should-run.outputs.run == 'true'
      working-directory: ./services/${{ matrix.service }}
      run: |
        echo "🔍 Instalando govulncheck..."
        go install golang.org/x/vuln/cmd/govulncheck@latest
        echo "🔍 Ejecutando govulncheck en ${{ matrix.service }}..."
        govulncheck ./...
      continue-on-error: true

  # Job 6: Verificación de estructura del proyecto
  project-structure:
    name: 📁 Verificar Estructura
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 🔍 Verificar estructura de archivos requeridos
      run: |
        echo "🔍 Verificando estructura del proyecto..."
        
        # Archivos raíz requeridos
        required_files=(
          "README.md"
          "QUICKSTART.md"
          ".gitignore"
          ".golangci.yml"
        )
        
        # Directorios requeridos
        required_dirs=(
          "services/user-service"
          "services/resource-service" 
          "services/booking-service"
          "services/notification-service"
          "api-gateway"
          "kubernetes"
          "infrastructure"
          "docs"
          "scripts"
        )
        
        exit_code=0
        
        # Verificar archivos
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ $file existe"
          else
            echo "❌ $file falta"
            exit_code=1
          fi
        done
        
        # Verificar directorios
        for dir in "${required_dirs[@]}"; do
          if [ -d "$dir" ]; then
            echo "✅ $dir/ existe"
          else
            echo "❌ $dir/ falta"
            exit_code=1
          fi
        done
        
        # Verificar que cada servicio tiene sus archivos esenciales
        services=("user-service" "resource-service" "booking-service" "notification-service")
        for service in "${services[@]}"; do
          service_files=("go.mod" "main.go" "README.md")
          for file in "${service_files[@]}"; do
            if [ -f "services/$service/$file" ]; then
              echo "✅ services/$service/$file existe"
            else
              echo "❌ services/$service/$file falta"
              exit_code=1
            fi
          done
        done
        
        if [ $exit_code -eq 0 ]; then
          echo "🎉 Estructura del proyecto verificada correctamente"
        fi
        
        exit $exit_code

  # Job 7: Docker build (solo si hay cambios relevantes)
  docker-build:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [detect-changes, service-build-test]
    if: needs.detect-changes.outputs.services == 'true' && (github.event_name == 'push' || github.event_name == 'pull_request')
    
    strategy:
      matrix:
        service: [user-service, resource-service, booking-service, notification-service]
      fail-fast: false
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 🔍 Verificar si el servicio cambió
      id: should-run
      run: |
        if [ "${{ needs.detect-changes.outputs[matrix.service] }}" == "true" ] || [ "${{ github.event_name }}" == "push" ]; then
          echo "run=true" >> $GITHUB_OUTPUT
        else
          echo "run=false" >> $GITHUB_OUTPUT
        fi
      
    - name: 🐳 Setup Docker Buildx
      if: steps.should-run.outputs.run == 'true'
      uses: docker/setup-buildx-action@v3
      
    - name: 🏗️ Build Docker image para ${{ matrix.service }}
      if: steps.should-run.outputs.run == 'true'
      uses: docker/build-push-action@v5
      with:
        context: ./services/${{ matrix.service }}
        push: false
        tags: ${{ matrix.service }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job final: Status check agregado
  ci-success:
    name: ✅ CI Success
    runs-on: ubuntu-latest
    needs: [setup-validation, service-build-test, advanced-lint, project-structure]
    if: always()
    
    steps:
    - name: 🎉 All checks passed
      if: |
        needs.setup-validation.result == 'success' &&
        needs.service-build-test.result == 'success' &&
        needs.advanced-lint.result == 'success' &&
        needs.project-structure.result == 'success'
      run: |
        echo "🎉 ¡Todos los checks del CI han pasado exitosamente!"
        echo "✅ Setup y validación: OK"
        echo "✅ Build y tests: OK" 
        echo "✅ Linting: OK"
        echo "✅ Estructura: OK"
        
    - name: ❌ Some checks failed
      if: |
        needs.setup-validation.result == 'failure' ||
        needs.service-build-test.result == 'failure' ||
        needs.advanced-lint.result == 'failure' ||
        needs.project-structure.result == 'failure'
      run: |
        echo "❌ Algunos checks han fallado:"
        echo "Setup: ${{ needs.setup-validation.result }}"
        echo "Build/Test: ${{ needs.service-build-test.result }}"
        echo "Linting: ${{ needs.advanced-lint.result }}"
        echo "Estructura: ${{ needs.project-structure.result }}"
        exit 1
