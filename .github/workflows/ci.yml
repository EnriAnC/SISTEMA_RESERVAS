# CI/CD Pipeline Principal para Sistema de Reservas
# Este workflow valida la compilaci√≥n, formato y calidad del c√≥digo Go

name: üîÑ CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Variables de entorno globales
env:
  GO_VERSION: '1.21'
  GOLANGCI_LINT_VERSION: v1.54

jobs:
  # Job 1: Verificaci√≥n de c√≥digo Go
  build-and-lint:
    name: üèóÔ∏è Build & Lint
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        # Testeamos en m√∫ltiples versiones de Go para garantizar compatibilidad
        go-version: ['1.21', '1.22']
        service: ['user-service', 'resource-service', 'booking-service', 'notification-service']
    
    steps:
    # Paso 1: Checkout del c√≥digo
    - name: üì• Checkout c√≥digo
      uses: actions/checkout@v4
      
    # Paso 2: Configurar Go
    - name: üêπ Configurar Go ${{ matrix.go-version }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
        
    # Paso 3: Cache de dependencias Go para acelerar builds
    - name: üì¶ Cache dependencias Go
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
          
    # Paso 4: Descargar dependencias
    - name: üì• Descargar dependencias
      working-directory: ./services/${{ matrix.service }}
      run: go mod download
      
    # Paso 5: Verificar que go mod tidy no tiene cambios pendientes
    - name: üîç Verificar go mod tidy
      working-directory: ./services/${{ matrix.service }}
      run: |
        go mod tidy
        if [ -n "$(git status --porcelain)" ]; then
          echo "‚ùå go mod tidy tiene cambios pendientes"
          git diff
          exit 1
        else
          echo "‚úÖ go mod est√° limpio"
        fi
        
    # Paso 6: Verificar formato del c√≥digo
    - name: üé® Verificar formato Go (gofmt)
      working-directory: ./services/${{ matrix.service }}
      run: |
        if [ -n "$(gofmt -l .)" ]; then
          echo "‚ùå C√≥digo no formateado correctamente:"
          gofmt -d .
          exit 1
        else
          echo "‚úÖ C√≥digo correctamente formateado"
        fi
        
    # Paso 7: Verificar que el c√≥digo compila
    - name: üî® Compilar servicio
      working-directory: ./services/${{ matrix.service }}
      run: |
        echo "üèóÔ∏è Compilando ${{ matrix.service }}..."
        go build -v ./...
        echo "‚úÖ ${{ matrix.service }} compilado exitosamente"
        
    # Paso 8: Verificar que no hay errores de go vet
    - name: üîç An√°lisis est√°tico (go vet)
      working-directory: ./services/${{ matrix.service }}
      run: |
        echo "üîç Ejecutando go vet en ${{ matrix.service }}..."
        go vet ./...
        echo "‚úÖ go vet pas√≥ sin errores"

  # Job 2: Linting avanzado con golangci-lint
  advanced-lint:
    name: üßπ Linting Avanzado
    runs-on: ubuntu-latest
    needs: build-and-lint
    
    steps:
    - name: üì• Checkout c√≥digo
      uses: actions/checkout@v4
      
    - name: üêπ Configurar Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    # Ejecutar golangci-lint en cada servicio
    - name: üßπ golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: ${{ env.GOLANGCI_LINT_VERSION }}
        working-directory: services/user-service
        args: --timeout=5m
        
    - name: üßπ golangci-lint (resource-service)
      uses: golangci/golangci-lint-action@v3
      with:
        version: ${{ env.GOLANGCI_LINT_VERSION }}
        working-directory: services/resource-service
        args: --timeout=5m
        
    - name: üßπ golangci-lint (booking-service)
      uses: golangci/golangci-lint-action@v3
      with:
        version: ${{ env.GOLANGCI_LINT_VERSION }}
        working-directory: services/booking-service
        args: --timeout=5m
        
    - name: üßπ golangci-lint (notification-service)
      uses: golangci/golangci-lint-action@v3
      with:
        version: ${{ env.GOLANGCI_LINT_VERSION }}
        working-directory: services/notification-service
        args: --timeout=5m

  # Job 3: Verificaci√≥n de estructura del proyecto
  project-structure:
    name: üìÅ Verificar Estructura
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout c√≥digo
      uses: actions/checkout@v4
      
    - name: üîç Verificar estructura de archivos requeridos
      run: |
        echo "üîç Verificando estructura del proyecto..."
        
        # Archivos ra√≠z requeridos
        required_files=(
          "README.md"
          "QUICKSTART.md"
          ".gitignore"
        )
        
        # Directorios requeridos
        required_dirs=(
          "services/user-service"
          "services/resource-service" 
          "services/booking-service"
          "services/notification-service"
          "api-gateway"
          "kubernetes"
          "infrastructure"
          "docs"
          "scripts"
        )
        
        # Verificar archivos
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "‚úÖ $file existe"
          else
            echo "‚ùå $file falta"
            exit 1
          fi
        done
        
        # Verificar directorios
        for dir in "${required_dirs[@]}"; do
          if [ -d "$dir" ]; then
            echo "‚úÖ $dir/ existe"
          else
            echo "‚ùå $dir/ falta"
            exit 1
          fi
        done
        
        # Verificar que cada servicio tiene sus archivos esenciales
        services=("user-service" "resource-service" "booking-service" "notification-service")
        for service in "${services[@]}"; do
          service_files=("go.mod" "main.go" "Dockerfile" "README.md")
          for file in "${service_files[@]}"; do
            if [ -f "services/$service/$file" ]; then
              echo "‚úÖ services/$service/$file existe"
            else
              echo "‚ùå services/$service/$file falta"
              exit 1
            fi
          done
        done
        
        echo "üéâ Estructura del proyecto verificada correctamente"
